import xml
from xml.dom.minidom import Document
import copy
from collections import namedtuple
from xml.etree.ElementTree import Element, SubElement, Comment, tostring
from xml.etree import ElementTree
from xml.dom import minidom

# example = {'sibbling':{'couple':{'mother':'mom','father':'dad','children':[{'child':'foo'},                                                          {'child':'bar'}]}}}

class eLife2XML(object):
    root = Element('article')

    def __init__(self, poa_article):
        """
        set the root node
        get the article type from the object passed in to the class
        set default values for items that are boilder plate for this XML 
        """

        # set the boiler plate values
        self.journal_id_types = ["nlm-ta", "hwp", "publisher-id"]
        self.elife_journal_id = "eLife"
        self.elife_journal_title = "eLife"
        self.elife_epub_issn = "2050-084X"
        self.elife_publisher_name = "eLife Sciences Publications, Ltd"

        #TODO: set the doctype here too 
        self.root.set('article-type', poa_article.articleType)
        comment = Comment('generated by eLife')
        self.root.append(comment)
        self.build(self.root, poa_article)

    def gen_journal_meta(self, root, jnl_meta_info):
        print "hi"

    def build(self, root, poa_article):
        self.set_frontmatter(self.root)
        self.set_contrib_group(self.root, poa_article)

    def set_frontmatter(self, parent):
        self.front = SubElement(parent, 'front')
        self.set_journal_meta(self.front)

    def set_journal_meta(self, parent):
        """
        take boiler plate values from the init of the calss 
        """
        self.journal_meta = SubElement(parent, "journal-meta")

        # journal-id
        for journal_id_type in self.journal_id_types:
            self.journal_id = SubElement(self.journal_meta, "journal_id") 
            self.journal_id.text = self.elife_journal_id 
            self.journal_id.set("journal-id-type", journal_id_type) 

        # title-group
        self.issn = SubElement(parent, "issn")
        self.issn.text = self.elife_epub_issn
        self.issn.set("pub-type", "epub")

        # publisher
        self.publisher = SubElement(parent, "publisher")
        self.publisher_name = SubElement(self.publisher, "publisher_name")
        self.publisher_name.text = self.elife_publisher_name

    def set_contrib_group(self, parent, poa_article):
        self.contrib_group = SubElement(parent, "contrib_group")

        for contributor in poa_article.contributors:
            self.contrib = SubElement(self.contrib_group, "contrib")

            self.contrib.set("contrib-type", contributor.contrib_type)
            if contributor.corresp == True:
                self.contrib.set("corresp", "yes")
            if contributor.equal_contrib == True:
                self.contrib.set("equal_contrib", "yes")
            if contributor.auth_id is not None:
                self.contrib.set("auth_id", contributor.auth_id)

            self.name = SubElement(self.contrib, "name")
            self.surname = SubElement(self.name, "surname")
            self.surname.text = contributor.surname
            self.given_name = SubElement(self.name, "given_name")
            self.given_name.text = contributor.given_name

    def printXML(self):
        print self.root

    def prettyXML(self):
        rough_string = ElementTree.tostring(self.root, 'utf-8')
        reparsed = minidom.parseString(rough_string)
        return reparsed.toprettyxml(indent="\t")


class ContributorAffiliation():
    phone = None
    fax = None
    email = None 

    department = None
    institution = None
    city = None 

class eLifePOSContributor():
    """
    Currently we are not sure that we can get an auth_id for 
    all contributors, so this attribute remains an optional attribute. 
    """
    affiliations = []

    corresp = False
    equal_contrib = False

    auth_id = None
    orcid = None

    def __init__(self, contrib_type, surname, given_name):
        self.contrib_type = contrib_type
        self.surname = surname
        self.given_name = given_name

    def set_affiliation(self, affiliation):
        self.affiliations.append(affiliation)

class eLifePOA():
    """
    We include some boiler plate in the init, namely articleType
    """
    contributors = [] 

    def __init__(self, doi):
        self.articleType = "research-article"
        self.doi = doi 

    def add_contributor(self, contributor):
        self.contributors.append(contributor)

# test the aritcle class
print "testing the article class"
doi = "http://dx.doi.org/http://dx.doi.org/10.7554/eLife.00929"
newArticle = eLifePOA(doi)

auth1 = eLifePOSContributor("author", "Harrison", "Melissa")
auth1.auth_id = "029323as"
auth1.corresp = True
# auth1.email = "m.harrison@elifesciecnes.org"

auth2 = eLifePOSContributor("author", "Mulvany", "Ian")
auth2.auth_id = "0293asds"
auth2.corresp = True
# auth2.email = "ian@mulvany.net"

newArticle.add_contributor(auth1)
newArticle.add_contributor(auth2)

# test the XML generator 
eXML = eLife2XML(newArticle)
prettyXML = eXML.prettyXML()
print prettyXML


