import xml
from xml.dom.minidom import Document
import copy
from collections import namedtuple
from xml.etree.ElementTree import Element, SubElement, Comment, tostring
from xml.etree import ElementTree
from xml.dom import minidom

# example = {'sibbling':{'couple':{'mother':'mom','father':'dad','children':[{'child':'foo'},                                                          {'child':'bar'}]}}}

class eLife2XML(object):
    root = Element('article')

    def __init__(self, structure):
        """
        set the root node
        get the article type from the object passed in to the class
        set default values for items that are boilder plate for this XML 
        """

        # set the boiler plate values
        self.journal_id_types = ["nlm-ta", "hwp", "publisher-id"]
        self.elife_journal_id = "eLife"

        #TODO: set the doctype here too 
        self.root.set('article-type', structure.articleType)
        comment = Comment('generated by eLife')
        self.root.append(comment)
        self.build(self.root, structure)

    def gen_journal_meta(self, root, jnl_meta_info):
        print "hi"

    def build(self, root, structure):
        self.set_frontmatter(self.root)

    def set_frontmatter(self, parent):
        self.front = SubElement(parent, 'front')
        self.set_journal_meta(self.front)

    def set_journal_meta(self, parent):
        """
        take boiler plate values from the init of the calss 
        """
        self.journal_meta = SubElement(parent, "journal-meta")
        for journal_id_type in self.journal_id_types:
            self.journal_id = SubElement(self.journal_meta, "journal_id") 
            self.journal_id.text = self.elife_journal_id 
            self.journal_id.set("journal-id-type", journal_id_type) 

    def printXML(self):
        print self.root

    def prettyXML(self):
        rough_string = ElementTree.tostring(self.root, 'utf-8')
        reparsed = minidom.parseString(rough_string)
        return reparsed.toprettyxml(indent="\t")

class eLifePOA():
    def __init__(self):
        self.articleType = "research-article"
        self.journalTitle = "eLife"


# test the aritcle class
print "testing the article class"
newArticle = eLifePOA()
print newArticle.journalTitle 

# test the XML generator 
eXML = eLife2XML(newArticle)
prettyXML = eXML.prettyXML()
print prettyXML


